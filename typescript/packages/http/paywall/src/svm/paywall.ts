import type { PaymentRequirements } from "../types";

/**
 * Escapes a string for safe injection into JavaScript string literals
 */
function escapeString(str: string): string {
  return str
    .replace(/\\/g, "\\\\")
    .replace(/"/g, '\\"')
    .replace(/'/g, "\\'")
    .replace(/\n/g, "\\n")
    .replace(/\r/g, "\\r")
    .replace(/\t/g, "\\t");
}

interface SvmPaywallOptions {
  amount: number;
  paymentRequirements: PaymentRequirements[];
  currentUrl: string;
  testnet: boolean;
  cdpClientKey?: string;
  appName?: string;
  appLogo?: string;
  sessionTokenEndpoint?: string;
}

/**
 * Generates SVM-specific paywall HTML
 */
export function getSvmPaywallHtml(options: SvmPaywallOptions): string {
  let SVM_PAYWALL_TEMPLATE: string;

  try {
    // Will be generated by build script
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const template = require("./gen/template");
    SVM_PAYWALL_TEMPLATE = template.SVM_PAYWALL_TEMPLATE;
  } catch {
    // Template not built yet, return placeholder
    return `<!DOCTYPE html><html><body><h1>SVM Paywall (run pnpm build:paywall to generate full template)</h1></body></html>`;
  }

  const {
    amount,
    testnet,
    paymentRequirements,
    currentUrl,
    cdpClientKey,
    appName,
    appLogo,
    sessionTokenEndpoint,
  } = options;

  const logOnTestnet = testnet
    ? "console.log('SVM Payment requirements initialized:', window.x402);"
    : "";

  const configScript = `
  <script>
    window.x402 = {
      amount: ${amount},
      paymentRequirements: ${JSON.stringify(paymentRequirements)},
      testnet: ${testnet},
      currentUrl: "${escapeString(currentUrl)}",
      config: {
        chainConfig: {},
      },
      cdpClientKey: "${escapeString(cdpClientKey || "")}",
      appName: "${escapeString(appName || "")}",
      appLogo: "${escapeString(appLogo || "")}",
      sessionTokenEndpoint: "${escapeString(sessionTokenEndpoint || "")}",
    };
    ${logOnTestnet}
  </script>`;

  return SVM_PAYWALL_TEMPLATE.replace("</head>", `${configScript}\n</head>`);
}
